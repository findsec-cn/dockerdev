Index: main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/jackc/pgx/v4/pgxpool\"\n)\n\nfunc main() {\n\t// Set the flags for the logging package to give us the filename in the logs\n\tlog.SetFlags(log.LstdFlags | log.Lshortfile)\n\n\tdbPool := getDBConnection(context.Background())\n\tdefer dbPool.Close()\n\n\tlog.Println(\"starting server...\")\n\thttp.HandleFunc(\"/\", homeHandler(dbPool))\n\thttp.HandleFunc(\"/demo\", func(w http.ResponseWriter, r *http.Request) {\n\t\tvisitorID := 0\n\t\terr := dbPool.QueryRow(r.Context(), \"INSERT INTO visitors(user_agent, datetime) VALUES ($1, now()) RETURNING id\", r.UserAgent()).Scan(&visitorID)\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\t_, _ = w.Write([]byte(\"failed to update the database\"))\n\t\t\tlog.Printf(\"[error] dbPool error: %v\\n\", err)\n\t\t\treturn\n\t\t}\n\n\t\tw.WriteHeader(http.StatusOK)\n\t\t_, _ = fmt.Fprintf(w, `Hello, visitor %d!`, visitorID)\n\t})\n\tlog.Fatal(http.ListenAndServe(\":8000\", nil))\n}\n\nfunc homeHandler(db *pgxpool.Pool) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tvisitorID := 0\n\t\t//language=sql\n\t\terr := db.QueryRow(r.Context(), \"INSERT INTO visitors(user_agent, datetime) VALUES ($1, now()) RETURNING id\", r.UserAgent()).Scan(&visitorID)\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\t_, _ = w.Write([]byte(\"failed to update the database\"))\n\t\t\tlog.Printf(\"[or] db error: %v\\n\", err)\n\t\t\treturn\n\t\t}\n\n\t\tw.WriteHeader(http.StatusOK)\n\t\t_, _ = fmt.Fprintf(w, `Hello, visitor %d!`, visitorID)\n\t}\n}\n\nfunc getDBConnection(ctx context.Context) *pgxpool.Pool {\n\t// Retrieve the database host address\n\thost := os.Getenv(\"DD_DB_HOST\")\n\tif host == \"\" {\n\t\thost = \"127.0.0.1\"\n\t}\n\n\tconst connectionString = \"postgres://goland:goland@%s:5432/goland?sslmode=disable\"\n\n\t// Try connecting to the database a few times before giving up\n\t// Retry to connect for a while\n\tvar dbPool *pgxpool.Pool\n\tvar err error\n\tfor i := 1; i < 8; i++ {\n\t\tlog.Printf(\"trying to connect to the db server (attempt %d)...\\n\", i)\n\t\tdbPool, err = pgxpool.Connect(ctx, fmt.Sprintf(connectionString, host))\n\t\tif err == nil {\n\t\t\tbreak\n\t\t}\n\t\tlog.Printf(\"got error: %v\\n\", err)\n\n\t\t// Sleep a bit before trying again\n\t\ttime.Sleep(time.Duration(i*i) * time.Second)\n\t}\n\n\t// Stop execution if the database was not initialized\n\tif dbPool == nil {\n\t\tlog.Fatalln(\"could not connect to the database\")\n\t}\n\n\t// Get a connection from the pool and check if the database connection is active and working\n\tdb, err := dbPool.Acquire(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to get connection on startup: %v\\n\", err)\n\t}\n\tif err := db.Conn().Ping(ctx); err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\t// Add the connection back to the pool\n\tdb.Release()\n\n\treturn dbPool\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main.go	(revision d5440eb8937d95c3a0c173c40319c497e6cd3805)
+++ main.go	(date 1590661246267)
@@ -1,99 +1,19 @@
 package main
 
 import (
-	"context"
 	"fmt"
 	"log"
 	"net/http"
-	"os"
-	"time"
-
-	"github.com/jackc/pgx/v4/pgxpool"
 )
 
 func main() {
 	// Set the flags for the logging package to give us the filename in the logs
 	log.SetFlags(log.LstdFlags | log.Lshortfile)
 
-	dbPool := getDBConnection(context.Background())
-	defer dbPool.Close()
-
 	log.Println("starting server...")
-	http.HandleFunc("/", homeHandler(dbPool))
-	http.HandleFunc("/demo", func(w http.ResponseWriter, r *http.Request) {
-		visitorID := 0
-		err := dbPool.QueryRow(r.Context(), "INSERT INTO visitors(user_agent, datetime) VALUES ($1, now()) RETURNING id", r.UserAgent()).Scan(&visitorID)
-		if err != nil {
-			w.WriteHeader(http.StatusInternalServerError)
-			_, _ = w.Write([]byte("failed to update the database"))
-			log.Printf("[error] dbPool error: %v\n", err)
-			return
-		}
-
+	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
 		w.WriteHeader(http.StatusOK)
-		_, _ = fmt.Fprintf(w, `Hello, visitor %d!`, visitorID)
+		_, _ = fmt.Fprintln(w, `Hello, visitor!`)
 	})
 	log.Fatal(http.ListenAndServe(":8000", nil))
 }
-
-func homeHandler(db *pgxpool.Pool) http.HandlerFunc {
-	return func(w http.ResponseWriter, r *http.Request) {
-		visitorID := 0
-		//language=sql
-		err := db.QueryRow(r.Context(), "INSERT INTO visitors(user_agent, datetime) VALUES ($1, now()) RETURNING id", r.UserAgent()).Scan(&visitorID)
-		if err != nil {
-			w.WriteHeader(http.StatusInternalServerError)
-			_, _ = w.Write([]byte("failed to update the database"))
-			log.Printf("[or] db error: %v\n", err)
-			return
-		}
-
-		w.WriteHeader(http.StatusOK)
-		_, _ = fmt.Fprintf(w, `Hello, visitor %d!`, visitorID)
-	}
-}
-
-func getDBConnection(ctx context.Context) *pgxpool.Pool {
-	// Retrieve the database host address
-	host := os.Getenv("DD_DB_HOST")
-	if host == "" {
-		host = "127.0.0.1"
-	}
-
-	const connectionString = "postgres://goland:goland@%s:5432/goland?sslmode=disable"
-
-	// Try connecting to the database a few times before giving up
-	// Retry to connect for a while
-	var dbPool *pgxpool.Pool
-	var err error
-	for i := 1; i < 8; i++ {
-		log.Printf("trying to connect to the db server (attempt %d)...\n", i)
-		dbPool, err = pgxpool.Connect(ctx, fmt.Sprintf(connectionString, host))
-		if err == nil {
-			break
-		}
-		log.Printf("got error: %v\n", err)
-
-		// Sleep a bit before trying again
-		time.Sleep(time.Duration(i*i) * time.Second)
-	}
-
-	// Stop execution if the database was not initialized
-	if dbPool == nil {
-		log.Fatalln("could not connect to the database")
-	}
-
-	// Get a connection from the pool and check if the database connection is active and working
-	db, err := dbPool.Acquire(ctx)
-	if err != nil {
-		log.Fatalf("failed to get connection on startup: %v\n", err)
-	}
-	if err := db.Conn().Ping(ctx); err != nil {
-		log.Fatalln(err)
-	}
-
-	// Add the connection back to the pool
-	db.Release()
-
-	return dbPool
-}
Index: Dockerfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Compile stage\nFROM golang:1.13.8 AS build-env\n\nADD . /dockerdev\nWORKDIR /dockerdev\n\nRUN go build -o /server\n\n# Final stage\nFROM debian:buster\n\nEXPOSE 8000\n\nWORKDIR /\nCOPY --from=build-env /server /\n\nCMD [\"/server\"]\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Dockerfile	(revision d5440eb8937d95c3a0c173c40319c497e6cd3805)
+++ Dockerfile	(date 1590661816358)
@@ -4,7 +4,7 @@
 ADD . /dockerdev
 WORKDIR /dockerdev
 
-RUN go build -o /server
+RUN GOPROXY=https://goproxy.cn go build -o /server
 
 # Final stage
 FROM debian:buster
